#include "platform.h"
#include <mad.h>
#include <limits.h>

typedef unsigned long u32_t;
typedef unsigned short u16_t;

static struct {
    const char* fname;
    FIL f;
    FILINFO inf;

    signed short* out_ptr;
    unsigned char* guard_ptr;
    int status;
    mad_timer_t timer;
    struct mad_stream stream;
    struct mad_frame frame;
    struct mad_synth synth;

    unsigned long frame_count;
} g;

char* MadErrorString(struct mad_stream* stream)
{
    return "";
}

#define MadFixedToSshort(x) ({ signed short _r; if((x) >= MAD_F_ONE) _r = (SHRT_MAX); else if((x) <= -MAD_F_ONE) _r = (-SHRT_MAX); else _r = (x) >> (MAD_F_FRACBITS - 15); _r; })

static inline signed short MadFixedToSshort2(mad_fixed_t Fixed)
{
    if(Fixed >= MAD_F_ONE)
        return (SHRT_MAX);
    if(Fixed <= -MAD_F_ONE)
        return (-SHRT_MAX);
    Fixed = Fixed >> (MAD_F_FRACBITS - 15);
    return ((signed short)Fixed);
}

static void open_f(void)
{
    f_stat(g.fname, &g.inf);

    g.guard_ptr = NULL;
    g.status = 0;
    g.frame_count = 0;
    mad_stream_init(&g.stream);
    mad_frame_init(&g.frame);
    mad_synth_init(&g.synth);
    mad_timer_reset(&g.timer);

    printf("### %d ###\n", g.frame.header.layer);

    if(f_open(&g.f, g.fname, FA_READ) != FR_OK) {
        printf("%s: can't create a new bstdfile_t.\n", g.fname);
        return;
    }
    _dbg();
}

static void close_f(void)
{
    mad_synth_finish(&g.synth);
    mad_frame_finish(&g.frame);
    mad_stream_finish(&g.stream);
    f_close(&g.f);
}

static int PrintFrameInfo(FILE* fp, struct mad_header* Header)
{
    const char* Layer = Layer, * Mode = Mode, * Emphasis = Emphasis;
    switch(Header->layer) {
        case MAD_LAYER_I:
            Layer = "I";
            break;
        case MAD_LAYER_II:
            Layer = "II";
            break;
        case MAD_LAYER_III:
            Layer = "III";
            break;
        default:
            Layer = "(unexpected layer value)";
            break;
    }
    switch(Header->mode) {
        case MAD_MODE_SINGLE_CHANNEL:
            Mode = "single channel";
            break;
        case MAD_MODE_DUAL_CHANNEL:
            Mode = "dual channel";
            break;
        case MAD_MODE_JOINT_STEREO:
            Mode = "joint (MS/intensity) stereo";
            break;
        case MAD_MODE_STEREO:
            Mode = "normal LR stereo";
            break;
        default:
            Mode = "(unexpected mode value)";
            break;
    }
    switch(Header->emphasis) {
        case MAD_EMPHASIS_NONE:
            Emphasis = "no";
            break;
        case MAD_EMPHASIS_50_15_US:
            Emphasis = "50/15 us";
            break;
        case MAD_EMPHASIS_CCITT_J_17:
            Emphasis = "CCITT J.17";
            break;
#if (MAD_VERSION_MAJOR>=1) ||  ((MAD_VERSION_MAJOR==0) && (MAD_VERSION_MINOR>=15))
        case MAD_EMPHASIS_RESERVED:
            Emphasis = "reserved(!)";
            break;
#endif
        default:
            Emphasis = "(unexpected emphasis value)";
            break;
    }
//    u32_t sample_rate = 22050UL;

    DMA_Cmd(DMA1_Stream4, DISABLE);

    SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, DISABLE);

    I2S_InitTypeDef i2s_is;
    I2S_Cmd(SPI2, DISABLE);
    i2s_is.I2S_Standard = I2S_Standard_Phillips;
    i2s_is.I2S_DataFormat = I2S_DataFormat_16bextended;
    i2s_is.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
    i2s_is.I2S_AudioFreq = Header->samplerate;
//    i2s_is.I2S_AudioFreq = sample_rate;
    i2s_is.I2S_CPOL = I2S_CPOL_High;
    i2s_is.I2S_Mode = I2S_Mode_MasterTx;
    I2S_Init(SPI2, &i2s_is);
    I2S_Cmd(SPI2, ENABLE);
    SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, ENABLE);
    DMA_Cmd(DMA1_Stream4, ENABLE);

    printf("sample_rate: %d\n", Header->samplerate);

//    fprintf(fp, "%s: %lu kb/s audio MPEG layer %s stream %s CRC, "
//        "%s with %s emphasis at %d Hz sample rate\n", g.fname, Header->bitrate,
//        Layer, Header->flags & MAD_FLAG_PROTECTION ? "with" : "without", Mode,
//        Emphasis, Header->samplerate);
    return (ferror(fp));
}

static void read_f(void* buf)
{
    static size_t size, remaining;
    unsigned char* read_ptr;
    static int pos = 0;

    DataConfig_t* pdc = DC_Get();

    start:

    if(g.stream.buffer == NULL || g.stream.error == MAD_ERROR_BUFLEN) {
        if(g.stream.next_frame != NULL) {
            remaining = g.stream.bufend - g.stream.next_frame;
            memmove(pdc->data.in_buf, g.stream.next_frame, remaining);
            read_ptr = pdc->data.in_buf + remaining;
            size = DC_IN_BUF_SIZE - remaining;
        }
        else {
            size = DC_IN_BUF_SIZE;
            read_ptr = pdc->data.in_buf;
            remaining = 0;
        }

        f_read(&g.f, read_ptr, size, &size);
        pos += size;
        printf("%d %lu\n", pos, f_tell(&g.f));

        if(size <= 0) {
            zplay_stop();
        }
        if(f_eof(&g.f)) {
            g.guard_ptr = read_ptr + size;
            memset(g.guard_ptr, 0, MAD_BUFFER_GUARD);
            size += MAD_BUFFER_GUARD;
            zplay_stop();
        }
        mad_stream_buffer(&g.stream, pdc->data.in_buf, size + remaining);
        g.stream.error = 0;
    }
    if(mad_frame_decode(&g.frame, &g.stream)) {
        if(MAD_RECOVERABLE(g.stream.error)) {
            if(g.stream.error != MAD_ERROR_LOSTSYNC
                || g.stream.this_frame != g.guard_ptr) {
                _dbg();
                goto start;
            }
//            return;

        }
        else if(g.stream.error == MAD_ERROR_BUFLEN) {
            _dbg();
            goto start;
//            return;
        }
        else {
            g.status = 1;
            _dbg();
            return;
        }
    }
    if(g.frame_count == 0)
        if(PrintFrameInfo(stderr, &g.frame.header)) {
            g.status = 1;
            _dbg();
            return;
        }
    g.frame_count++;
    mad_timer_add(&g.timer, g.frame.header.duration);
    mad_synth_frame(&g.synth, &g.frame);

    g.out_ptr = buf;    //pdc->data.out_buf;

    if(g.frame_count == 1) {

//        printf("$$$ %d\n", g.synth.pcm.length);
//        I2S_Write_DMA(pdc->data.out_buf, g.synth.pcm.length * 8);

        {
    zplay_cfg_t cfg;
    cfg.buf = pdc->data.out_buf;
    cfg.buf_size = g.synth.pcm.length*8;    //g.synth.pcm.length * 2 * 2;    //1152 * 2 * 2;
    memset(cfg.buf, 0, cfg.buf_size);

    cfg.dma_write_start_f = I2S_Write_DMA;
    cfg.dma_write_stop_f = I2S_Write_DMA_Stop;
    cfg.open_f = open_f;
    cfg.close_f = close_f;
    cfg.read_f = read_f;
    zplay_init(&cfg);
        }

    }
    for(register int i = 0; i < g.synth.pcm.length; i++) {
        register signed short Sample;
        Sample = MadFixedToSshort(g.synth.pcm.samples[0][i]);
//        *(unsigned short*)(g.out_ptr) = Sample; g.out_ptr += 2;
        *(g.out_ptr++) = Sample;
        if(MAD_NCHANNELS(&g.frame.header) == 2)
            Sample = MadFixedToSshort(g.synth.pcm.samples[1][i]);
//        *(unsigned short*)(g.out_ptr) = Sample; g.out_ptr += 2;
        *(g.out_ptr++) = Sample;
    }
//    fflush(stdout);
}

void play_mp3_init(const char* fname)
{
    DataConfig_t* pdc = DC_Get();

    g.fname = fname;
    zplay_cfg_t cfg;
    cfg.buf = pdc->data.out_buf;
    cfg.buf_size = 9216;    //g.synth.pcm.length * 2 * 2;    //1152 * 2 * 2;
    memset(cfg.buf, 0, cfg.buf_size);

    cfg.dma_write_start_f = I2S_Write_DMA;
    cfg.dma_write_stop_f = I2S_Write_DMA_Stop;
    cfg.open_f = open_f;
    cfg.close_f = close_f;
    cfg.read_f = read_f;
    zplay_init(&cfg);
}
